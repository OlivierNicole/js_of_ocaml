Entering directory '/home/olivier/jsoo/js_of_ocaml'
Leaving directory '/home/olivier/jsoo/js_of_ocaml'
Before CPS transform:
Entry point: 0

==== 0 () ====
  global_data_a_ = "caml_get_global_data"()
  cst_b_ = CONST{""}
  cst_aaa_c_ = CONST{"aaa"}
  cst_toto_d_ = CONST{"toto"}
  Stdlib_e_ = "caml_js_get"(global_data_a_, "Stdlib"j)
  branch 159 ()

==== 2 () ====
  branch 3 ()

==== 3 () ====
  pushtrap 4 () handler _f_ => 14 (cst_b_) continuation 8

==== 4 () ====
  _g_ = CONST{0}
  _h_ = g_i_(_g_)
  poptrap 14 (_h_)

==== 8 () ====
  branch 14 (_h_)

==== 10 () ====
  branch 14 (cst_b_)

==== 14 (s_j_) ====
  _k_ = Stdlib_e_[27]
  _l_ = _k_(s_j_, cst_aaa_c_)
  return _l_

==== 22 (l_m_) ====
  match_n_ = g_o_(l_m_)
  _p_ = match_n_[0]
  _q_ = 72330306 <= _p_
  if _q_ then 31 () else 37 ()

==== 31 () ====
  l_r_ = match_n_[1]
  branch 22 (l_r_)

==== 37 () ====
  exn_s_ = match_n_[1]
  raise exn_s_

==== 44 () ====
  branch 45 ()

==== 45 () ====
  pushtrap 46 () handler _t_ => 22 (l_u_) continuation 50

==== 46 () ====
  _v_ = CONST{0}
  _w_ = f_x_(_v_)
  poptrap 50 ()

==== 50 () ====
  return _w_

==== 52 () ====
  branch 22 (l_u_)

==== 61 () ====
  branch 62 ()

==== 62 () ====
  pushtrap 63 () handler _y_ => 69 () continuation 67

==== 63 () ====
  _z_ = "caml_int_of_string"(s_A_)
  poptrap 85 (_z_)

==== 67 () ====
  branch 85 (_z_)

==== 69 () ====
  _B_ = _y_[0]
  _C_ = Stdlib_e_[6]
  _D_ = _B_ === _C_
  if _D_ then 78 () else 81 ()

==== 78 () ====
  _E_ = CONST{0}
  branch 85 (_E_)

==== 81 () ====
  reraise _y_

==== 83 () ====
  branch 85 (_E_)

==== 85 (n_F_) ====
  branch 87 ()

==== 87 () ====
  pushtrap 88 () handler _G_ => 104 () continuation 102

==== 88 () ====
  _H_ = "caml_string_equal"(s_A_, "")
  if _H_ then 95 () else 99 ()

==== 95 () ====
  _I_ = Stdlib_e_[7]
  raise _I_

==== 99 () ====
  _J_ = CONST{7}
  poptrap 118 (_J_)

==== 102 () ====
  branch 118 (_J_)

==== 104 () ====
  _K_ = Stdlib_e_[7]
  _L_ = _G_ === _K_
  if _L_ then 111 () else 114 ()

==== 111 () ====
  _M_ = CONST{0}
  branch 118 (_M_)

==== 114 () ====
  reraise _G_

==== 116 () ====
  branch 118 (_M_)

==== 118 (m_N_) ====
  branch 120 ()

==== 120 () ====
  pushtrap 121 () handler _O_ => 147 () continuation 145

==== 121 () ====
  _P_ = "caml_string_equal"(s_A_, "")
  if _P_ then 128 () else 132 ()

==== 128 () ====
  _Q_ = Stdlib_e_[7]
  raise _Q_

==== 132 () ====
  _R_ = Stdlib_e_[78]
  _S_ = _R_(cst_toto_d_)
  _T_ = {tag=0; 0 = _S_; 1 = n_F_; 2 = m_N_}
  _U_ = {tag=0; 0 = _T_}
  poptrap 145 ()

==== 145 () ====
  return _U_

==== 147 () ====
  _V_ = Stdlib_e_[7]
  _W_ = _O_ === _V_
  if _W_ then 154 () else 157 ()

==== 154 () ====
  _X_ = CONST{0}
  return _X_

==== 157 () ====
  reraise _O_

==== 159 () ====
  exceptions_Y_ = fun(s_A_){61 ()}
  handler_is_loop_Z_ = fun(f_x_, g_o_, l_u_){44 ()}
  handler_is_merge_node___ = fun(g_i_){2 ()}
  Test_$_ = {tag=0; 0 = exceptions_Y_; 1 = handler_is_loop_Z_; 2 = handler_is_merge_node___}
  _aa_ = "caml_register_global"(6, Test_$_, "Test"j)
  stop

==== 181 () ====
  branch 22 (l_u_)

cname = exceptions_Y_
======== true
==== 61 () ====
   branch 62 ()

==== 62 () ====
   pushtrap 63 () handler _y_ => 69 () continuation 67

==== 63 () ====
   _z_ = "caml_int_of_string"(s_A_)
   poptrap 85 (_z_)

==== 85 (n_F_) ====
   branch 87 ()

==== 87 () ====
   pushtrap 88 () handler _G_ => 104 () continuation 102

==== 88 () ====
   _H_ = "caml_string_equal"(s_A_, "")
   if _H_ then 95 () else 99 ()

==== 95 () ====
   _I_ = Stdlib_e_[7]
   raise _I_

==== 99 () ====
   _J_ = CONST{7}
   poptrap 118 (_J_)

==== 118 (m_N_) ====
   branch 120 ()

==== 120 () ====
   pushtrap 121 () handler _O_ => 147 () continuation 145

==== 121 () ====
   _P_ = "caml_string_equal"(s_A_, "")
   if _P_ then 128 () else 132 ()

==== 128 () ====
   _Q_ = Stdlib_e_[7]
   raise _Q_

==== 132 () ====
   _R_ = Stdlib_e_[78]
 * _S_ = _R_(cst_toto_d_)
   branch 185 ()

CPS
==== 185 () ====
   _T_ = {tag=0; 0 = _S_; 1 = n_F_; 2 = m_N_}
   _U_ = {tag=0; 0 = _T_}
   poptrap 145 ()

==== 145 () ====
   return _U_

CPS
==== 147 () ====
   _V_ = Stdlib_e_[7]
   _W_ = _O_ === _V_
   if _W_ then 154 () else 157 ()

==== 154 () ====
   _X_ = CONST{0}
   return _X_

==== 157 () ====
   reraise _O_

==== 104 () ====
   _K_ = Stdlib_e_[7]
   _L_ = _G_ === _K_
   if _L_ then 111 () else 114 ()

==== 111 () ====
   _M_ = CONST{0}
   branch 118 (_M_)

==== 114 () ====
   reraise _G_

==== 69 () ====
   _B_ = _y_[0]
   _C_ = Stdlib_e_[6]
   _D_ = _B_ === _C_
   if _D_ then 78 () else 81 ()

==== 78 () ====
   _E_ = CONST{0}
   branch 85 (_E_)

==== 81 () ====
   reraise _y_

cps_block 95
cps pc evaluates to 95
cps_block 128
cps pc evaluates to 128
cps_block 145
cps pc evaluates to 145
cps_block 185
cps pc evaluates to 185
cps_block 132
cps pc evaluates to 132
allocate_continuation ~direct_pc:185 ~src_pc:132 ~cont_pc:185
cps_block 121
cps pc evaluates to 121
cps_block 154
cps pc evaluates to 154
cps_block 157
cps pc evaluates to 157
cps_block 147
cps pc evaluates to 147
cps_block 120
cps pc evaluates to 120
allocate_continuation ~direct_pc:147 ~src_pc:120 ~cont_pc:147
cps_block 118
cps pc evaluates to 118
cps_block 99
cps pc evaluates to 99
cps_block 88
cps pc evaluates to 88
cps_block 111
cps pc evaluates to 111
cps_block 114
cps pc evaluates to 114
cps_block 104
cps pc evaluates to 104
cps_block 87
cps pc evaluates to 87
cps_block 85
cps pc evaluates to 85
cps_block 63
cps pc evaluates to 63
cps_block 78
cps pc evaluates to 78
cps_block 81
cps pc evaluates to 81
cps_block 69
cps pc evaluates to 69
cps_block 62
cps pc evaluates to 62
cps_block 61
cps pc evaluates to 61
cname = handler_is_loop_Z_
======== true
==== 44 () ====
   branch 45 ()

==== 45 () ====
   pushtrap 46 () handler _t_ => 22 (l_u_) continuation 50

==== 46 () ====
   _v_ = CONST{0}
 * _w_ = f_x_(_v_)
   branch 184 ()

CPS
==== 184 () ====
   poptrap 50 ()

==== 50 () ====
   return _w_

CPS
==== 22 (l_m_) ====
 * match_n_ = g_o_(l_m_)
   branch 183 ()

CPS
==== 183 () ====
   _p_ = match_n_[0]
   _q_ = 72330306 <= _p_
   if _q_ then 31 () else 37 ()

==== 31 () ====
   l_r_ = match_n_[1]
   branch 22 (l_r_)

==== 37 () ====
   exn_s_ = match_n_[1]
   raise exn_s_

cps_block 50
cps pc evaluates to 50
cps_block 184
cps pc evaluates to 184
cps_block 46
cps pc evaluates to 46
allocate_continuation ~direct_pc:184 ~src_pc:46 ~cont_pc:184
cps_block 31
cps pc evaluates to 31
cps_block 37
cps pc evaluates to 37
cps_block 183
cps pc evaluates to 183
cps_block 22
cps pc evaluates to 22
allocate_continuation ~direct_pc:183 ~src_pc:22 ~cont_pc:183
cps_block 45
cps pc evaluates to 45
allocate_continuation ~direct_pc:22 ~src_pc:45 ~cont_pc:22
allocate_closure ~branch:(return _ab_)
cps_block 44
cps pc evaluates to 44
cname = handler_is_merge_node___
======== true
==== 2 () ====
   branch 3 ()

==== 3 () ====
   pushtrap 4 () handler _f_ => 14 (cst_b_) continuation 8

==== 4 () ====
   _g_ = CONST{0}
 * _h_ = g_i_(_g_)
   branch 182 ()

CPS
==== 182 () ====
   poptrap 14 (_h_)

CPS
==== 14 (s_j_) ====
   _k_ = Stdlib_e_[27]
 * _l_ = _k_(s_j_, cst_aaa_c_)
   return _l_

cps_block 14
cps pc evaluates to 14
cps_block 182
cps pc evaluates to 182
cps_block 4
cps pc evaluates to 4
allocate_continuation ~direct_pc:182 ~src_pc:4 ~cont_pc:182
cps_block 3
cps pc evaluates to 3
allocate_continuation ~direct_pc:14 ~src_pc:3 ~cont_pc:14
allocate_closure ~branch:(return _ac_)
cps_block 2
cps pc evaluates to 2
======== false
==== 0 () ====
   global_data_a_ = "caml_get_global_data"()
   cst_b_ = CONST{""}
   cst_aaa_c_ = CONST{"aaa"}
   cst_toto_d_ = CONST{"toto"}
   Stdlib_e_ = "caml_js_get"(global_data_a_, "Stdlib"j)
   branch 159 ()

==== 159 () ====
 * exceptions_Y_ = fun(s_A_){61 ()}
 * handler_is_loop_Z_ = fun(f_x_, g_o_, l_u_){44 ()}
 * handler_is_merge_node___ = fun(g_i_){2 ()}
   Test_$_ = {tag=0; 0 = exceptions_Y_; 1 = handler_is_loop_Z_; 2 = handler_is_merge_node___}
   _aa_ = "caml_register_global"(6, Test_$_, "Test"j)
   stop

rewrite_direct_block 159
rewrite_direct_block 0
block before first subst: 
==== 186 () ====
  _ad_ = fun(l_m_){22 ()}
  _ab_ = _ad_!(l_u_)
  return _ab_

block after first subst: 
==== 186 () ====
  _ad_ = fun(l_m_){22 ()}
  _ab_ = _ad_!(l_u_)
  return _ab_

block before first subst: 
==== 187 () ====
  _ac_ = _ae_!(cst_b_)
  return _ac_

block after first subst: 
==== 187 () ====
  _ac_ = _ae_!(cst_b_)
  return _ac_

block before first subst: 
==== 186 () ====
  _ad_ = fun(l_m_){22 ()}
  _ab_ = _ad_!(l_u_)
  return _ab_

block after first subst: 
==== 186 () ====
  _ad_ = fun(l_m_){22 ()}
  _ab_ = _ad_!(l_u_)
  return _ab_

block before first subst: 
==== 187 () ====
  _ac_ = _ae_!(cst_b_)
  return _ac_

block after first subst: 
==== 187 () ====
  _ac_ = _ae_!(cst_b_)
  return _ac_

After CPS transform:
Entry point: 0

==== 0 () ====
  global_data_a_ = "caml_get_global_data"()
  cst_b_ = CONST{""}
  cst_aaa_c_ = CONST{"aaa"}
  cst_toto_d_ = CONST{"toto"}
  Stdlib_e_ = "caml_js_get"(global_data_a_, "Stdlib"j)
  branch 159 ()

==== 2 () ====
  branch 3 ()

==== 3 () ====
  _ae_ = fun(s_j_){14 ()}
  _af_ = fun(_f_){187 ()}
  _ag_ = "caml_push_trap"(_af_)
  branch 4 ()

==== 4 () ====
  _g_ = CONST{0}
  _ah_ = fun(_h_){182 ()}
  _ai_ = g_i_(_g_, _ah_)
  return _ai_

==== 8 () ====
  branch 14 (_h_)

==== 10 () ====
  branch 14 (cst_b_)

==== 14 () ====
  _k_ = Stdlib_e_[27]
  _aj_ = _k_(s_j_, cst_aaa_c_, cont_ak_)
  return _aj_

==== 22 () ====
  _al_ = fun(match_n_){183 ()}
  _am_ = g_o_(l_m_, _al_)
  return _am_

==== 31 () ====
  l_r_ = match_n_[1]
  _an_ = _ad_!(l_r_)
  return _an_

==== 37 () ====
  exn_s_ = match_n_[1]
  raise_ao_ = "caml_pop_trap"()
  exn_ap_ = "caml_maybe_attach_backtrace"(exn_s_, 1)
  _aq_ = raise_ao_!(exn_ap_)
  return _aq_

==== 44 () ====
  branch 45 ()

==== 45 () ====
  _ar_ = fun(_t_){186 ()}
  _as_ = "caml_push_trap"(_ar_)
  branch 46 ()

==== 46 () ====
  _v_ = CONST{0}
  _at_ = fun(_w_){184 ()}
  _au_ = f_x_(_v_, _at_)
  return _au_

==== 50 () ====
  _av_ = cont_aw_!(_w_)
  return _av_

==== 52 () ====
  branch 22 (l_u_)

==== 61 () ====
  branch 62 ()

==== 62 () ====
  pushtrap 63 () handler _y_ => 69 () continuation 67

==== 63 () ====
  _z_ = "caml_int_of_string"(s_A_)
  poptrap 85 (_z_)

==== 67 () ====
  branch 85 (_z_)

==== 69 () ====
  _B_ = _y_[0]
  _C_ = Stdlib_e_[6]
  _D_ = _B_ === _C_
  if _D_ then 78 () else 81 ()

==== 78 () ====
  _E_ = CONST{0}
  branch 85 (_E_)

==== 81 () ====
  raise_ax_ = "caml_pop_trap"()
  _ay_ = "caml_maybe_attach_backtrace"(_y_, 0)
  _az_ = raise_ax_!(_ay_)
  return _az_

==== 83 () ====
  branch 85 (_E_)

==== 85 (n_F_) ====
  branch 87 ()

==== 87 () ====
  pushtrap 88 () handler _G_ => 104 () continuation 102

==== 88 () ====
  _H_ = "caml_string_equal"(s_A_, "")
  if _H_ then 95 () else 99 ()

==== 95 () ====
  _I_ = Stdlib_e_[7]
  raise _I_

==== 99 () ====
  _J_ = CONST{7}
  poptrap 118 (_J_)

==== 102 () ====
  branch 118 (_J_)

==== 104 () ====
  _K_ = Stdlib_e_[7]
  _L_ = _G_ === _K_
  if _L_ then 111 () else 114 ()

==== 111 () ====
  _M_ = CONST{0}
  branch 118 (_M_)

==== 114 () ====
  raise_aA_ = "caml_pop_trap"()
  _aB_ = "caml_maybe_attach_backtrace"(_G_, 0)
  _aC_ = raise_aA_!(_aB_)
  return _aC_

==== 116 () ====
  branch 118 (_M_)

==== 118 (m_N_) ====
  branch 120 ()

==== 120 () ====
  _aD_ = fun(_O_){147 ()}
  _aE_ = "caml_push_trap"(_aD_)
  branch 121 ()

==== 121 () ====
  _P_ = "caml_string_equal"(s_A_, "")
  if _P_ then 128 () else 132 ()

==== 128 () ====
  _Q_ = Stdlib_e_[7]
  raise_aF_ = "caml_pop_trap"()
  _aG_ = "caml_maybe_attach_backtrace"(_Q_, 1)
  _aH_ = raise_aF_!(_aG_)
  return _aH_

==== 132 () ====
  _R_ = Stdlib_e_[78]
  _aI_ = fun(_S_){185 ()}
  _aJ_ = _R_(cst_toto_d_, _aI_)
  return _aJ_

==== 145 () ====
  _aK_ = cont_aL_!(_U_)
  return _aK_

==== 147 () ====
  _V_ = Stdlib_e_[7]
  _W_ = _O_ === _V_
  if _W_ then 154 () else 157 ()

==== 154 () ====
  _X_ = CONST{0}
  _aM_ = cont_aL_!(_X_)
  return _aM_

==== 157 () ====
  raise_aN_ = "caml_pop_trap"()
  _aO_ = "caml_maybe_attach_backtrace"(_O_, 0)
  _aP_ = raise_aN_!(_aO_)
  return _aP_

==== 159 () ====
  exceptions_Y_ = fun(s_A_, cont_aL_){61 ()}
  handler_is_loop_Z_ = fun(f_x_, g_o_, l_u_, cont_aw_){44 ()}
  handler_is_merge_node___ = fun(g_i_, cont_ak_){2 ()}
  Test_$_ = {tag=0; 0 = exceptions_Y_; 1 = handler_is_loop_Z_; 2 = handler_is_merge_node___}
  _aa_ = "caml_register_global"(6, Test_$_, "Test"j)
  stop

==== 181 () ====
  branch 22 (l_u_)

==== 182 () ====
  _aQ_ = "caml_pop_trap"()
  _aR_ = _ae_!(_h_)
  return _aR_

==== 183 () ====
  _p_ = match_n_[0]
  _q_ = 72330306 <= _p_
  if _q_ then 31 () else 37 ()

==== 184 () ====
  _aS_ = "caml_pop_trap"()
  branch 50 ()

==== 185 () ====
  _T_ = {tag=0; 0 = _S_; 1 = n_F_; 2 = m_N_}
  _U_ = {tag=0; 0 = _T_}
  _aT_ = "caml_pop_trap"()
  branch 145 ()

==== 186 () ====
  _ad_ = fun(l_m_){22 ()}
  _ab_ = _ad_!(l_u_)
  return _ab_

==== 187 () ====
  _ac_ = _ae_!(cst_b_)
  return _ac_

