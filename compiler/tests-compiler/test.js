// Generated by js_of_ocaml
//# buildInfo:effects=true, kind=cmo, use-js-string=true, version=5.4.0+git-5.3.0-62-gac3c3aaf5b-dirty

//# unitInfo: Provides: Test
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_string_equal = runtime.caml_string_equal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    Stdlib = global_data.Stdlib,
    cst_aaa = "aaa",
    cst_toto = "toto";
   function exceptions(s, cont){
    try{var _z_ = runtime.caml_int_of_string(s), n = _z_;}
    catch(_aV_){
     var _y_ = caml_wrap_exception(_aV_);
     if(_y_[1] !== Stdlib[7]){
      var raise$1 = caml_pop_trap();
      return raise$1(caml_maybe_attach_backtrace(_y_, 0));
     }
     var n = 0, _E_ = 0;
    }
    try{
     if(caml_string_equal(s, cst$0))
      throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var _J_ = 7, m = _J_;
    }
    catch(_aU_){
     var _G_ = caml_wrap_exception(_aU_);
     if(_G_ !== Stdlib[8]){
      var raise$0 = caml_pop_trap();
      return raise$0(caml_maybe_attach_backtrace(_G_, 0));
     }
     var m = 0, _M_ = 0;
    }
    caml_push_trap
     (function(_O_){
       if(_O_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_O_, 0));
      });
    if(caml_string_equal(s, cst$0)){
     var _Q_ = Stdlib[8], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_Q_, 1));
    }
    var _R_ = Stdlib[79];
    return caml_cps_call2
            (_R_,
             cst_toto,
             function(_S_){caml_pop_trap(); return cont([0, [0, _S_, n, m]]);});
   }
   function handler_is_loop(f, g, l, cont){
    caml_push_trap
     (function(_t_){
       function _ad_(l){
        return caml_cps_call2
                (g,
                 l,
                 function(match){
                  if(72330306 <= match[1]){
                   var l = match[2];
                   return caml_cps_exact_call1(_ad_, l);
                  }
                  var
                   exn = match[2],
                   raise = caml_pop_trap(),
                   exn$0 = caml_maybe_attach_backtrace(exn, 1);
                  return raise(exn$0);
                 });
       }
       return _ad_(l);
      });
    var _v_ = 0;
    return caml_cps_call2
            (f, _v_, function(_w_){caml_pop_trap(); return cont(_w_);});
   }
   function handler_is_merge_node(g, cont){
    function _ae_(s){return caml_cps_call3(Stdlib[28], s, cst_aaa, cont);}
    caml_push_trap(function(_f_){return _ae_(cst);});
    var _g_ = 0;
    return caml_cps_call2
            (g, _g_, function(_h_){caml_pop_trap(); return _ae_(_h_);});
   }
   var Test = [0, exceptions, handler_is_loop, handler_is_merge_node];
   runtime.caml_register_global(6, Test, "Test");
   return;
  }
  (globalThis));
